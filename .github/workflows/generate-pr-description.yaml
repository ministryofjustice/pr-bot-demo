name: Generate PR Description

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh jq

      - name: Collect commit messages
        id: commits
        run: |
          base=${{ github.event.pull_request.base.sha }}
          head=${{ github.event.pull_request.head.sha }}
          messages=$(git log --pretty=format:"%s%n%b" $base..$head)
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$messages" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check if PR body is empty
        id: bodycheck
        run: |
          branch=${{ github.head_ref }}
          pr_number=$(gh pr list --head "$branch" --base main --json number -q '.[0].number')
      
          if [ -z "$pr_number" ]; then
          echo "No PR found for branch $branch"
          echo "empty=false" >> $GITHUB_OUTPUT
          exit 0
          fi
      
          body=$(gh pr view "$pr_number" --json body -q '.body')
          clean=$(echo "$body" | tr -d '\n\r ')
      
          if [ -z "$clean" ] || [ "$clean" = "null" ]; then
          echo "PR #$pr_number has an empty body"
          echo "empty=true" >> $GITHUB_OUTPUT
          else
          echo "PR #$pr_number already has a body"
          echo "empty=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate description via OpenRouter
        if: steps.bodycheck.outputs.empty == 'true'
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          COMMITS: ${{ env.COMMITS }}
        run: |
          
          branch_name="${{ github.head_ref }}"
          ticket_key=$(echo "$branch_name" | grep -oE '[A-Z]+-[0-9]+' | head -1 || true)
          if [ -n "$ticket_key" ]; then
            jira_link="https://dsdmoj.atlassian.net/browse/$ticket_key"
          else
            jira_link=""
          fi
          echo "JIRA_LINK=$jira_link" >> $GITHUB_ENV
          
        
          echo "🔹 Building prompt payload..."
          prompt=$(cat <<'EOT'
          Generate a concise Markdown-formatted pull request description based on these Conventional Commit messages.
          Include sections: Summary, What Changed, Why, and Testing.
          If a Jira link is provided, include it as a final section titled **Related Jira**.
          Use British English and a professional tone.
        
          Commits:
          EOT
          )
          
          prompt="$prompt
          
          $COMMITS
          
          Jira: $jira_link"
          
          
          payload=$(jq -n \
          --arg model "mistralai/mistral-7b-instruct:free" \
          --arg content "$prompt" \
          '{model:$model,messages:[{"role":"user","content":$content}],max_tokens:700}')
  
  
          echo "🔹 Sending request to OpenRouter..."
          echo "$payload" | jq '.'
      
          response=$(curl -s -w "\n%{http_code}" https://openrouter.ai/api/v1/chat/completions \
          -H "Authorization: Bearer $OPENROUTER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$payload")
          
          http_code=$(echo "$response" | tail -n1 | tr -d '\r')
          json=$(echo "$response" | sed '$d')
      
          if [ "$http_code" != "200" ]; then
          echo "❌ API request failed with HTTP $http_code"
          echo "$json"
          exit 0
          fi
      
          text=$(echo "$json" | jq -r '.choices[0].message.content // empty')
      
          if [ -z "$text" ]; then
          echo "⚠️ No text returned from model."
          echo "$json"
          exit 0
          fi

          echo "🔹 Cleaning model output..."
          text=$(echo "$response" | jq -r '.choices[0].message.content')
          text=$(echo "$text" \
            | sed -E 's/<s>//g; s/<\/s>//g; s/\[\/?INST\]//g; s/\[\/?B_INST\]//g; s/<\|[^>]*\|>//g' \
            | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')

          echo "DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$text" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update PR body
        if: steps.bodycheck.outputs.empty == 'true'
        run: |
          gh pr edit ${{ github.event.pull_request.number }} \
            --body "${{ env.DESCRIPTION }}"
